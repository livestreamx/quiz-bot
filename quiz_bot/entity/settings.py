import datetime
import logging
import socket
from random import choice
from typing import List, Optional, Sequence

import pytz
from pydantic import BaseSettings, conint, validator
from quiz_bot.entity.objects import ChallengeInfo, ExtendedChallenge, WinnerResult
from quiz_bot.utils import display_time
from sqlalchemy.engine import Engine, engine_from_config
from sqlalchemy.engine.url import URL as SAURL
from sqlalchemy.engine.url import make_url
from sqlalchemy.exc import ArgumentError
from sqlalchemy.pool import SingletonThreadPool
from yarl import URL


class LoggingSettings(BaseSettings):
    level: str = logging.getLevelName(logging.INFO)
    format: str = "%(asctime)s [%(levelname)s] [%(name)s:%(lineno)s]  %(message)s"
    datefmt: str = "%H:%M:%S %d-%m-%Y"

    class Config:
        env_prefix = 'LOG_'

    def setup_logging(self) -> None:
        logging.basicConfig(level=self.level, format=self.format, datefmt=self.datefmt)


class ChitchatSettings(BaseSettings):
    url: Optional[URL]
    read_timeout: int = 3
    filter_phrases: List[str] = []

    @validator('url', pre=True)
    def make_url(cls, v: Optional[str]) -> Optional[URL]:
        if v is not None and isinstance(v, str):
            return URL(v)
        return v

    class Config:
        env_prefix = 'CHITCHAT_'


class RemoteClientSettings(BaseSettings):
    token: str
    threads_num: conint(ge=1) = 2  # type: ignore
    read_timeout: int = 5
    poll_timeout: int = 60

    class Config:
        env_prefix = 'REMOTE_'


class InfoSettings(BaseSettings):
    greetings: str = (
        "–ú–æ–µ –∏–º—è - <b>T-Quiz Bot</b>. @livestream_x —Å–æ–∑–¥–∞–ª –º–µ–Ω—è –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —è –≤—ã–ø–æ–ª–Ω—è–ª —Ñ—É–Ω–∫—Ü–∏—é –≤–µ–¥—É—â–µ–≥–æ –¥–ª—è "
        "–ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –Ø –∏–º–µ—é 3 –∫–æ–º–∞–Ω–¥—ã API:\n"
        "/start - –Ω–∞—á–∞—Ç—å –æ—á–µ—Ä–µ–¥–Ω–æ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ;\n"
        "/status - –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–µ–∫—É—â–µ–º—É –∏—Å–ø—ã—Ç–∞–Ω–∏—é;\n"
        "/help - –ø–æ–ª—É—á–∏—Ç—å –æ–±—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ.\n\n"
        "–ù–æ –º–æ–∂–µ—à—å –∏—Ö –Ω–µ –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å - —è –±—É–¥—É —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π –≤ —ç—Ç–æ–º –∏—Å–ø—ã—Ç–∞–Ω–∏–∏ –∏, –∫–∞–∫ –º–æ–≥—É, –ø–æ–º–æ–≥—É —Ç–µ–±–µ."
    )
    unknown_info: str = "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è –∑–∞ –±–æ—Ç —Ç–∞–∫–æ–π - –Ω–∞–∂–º–∏ –Ω–∞ <b>–∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏</b>."

    not_started_info: str = "–°–ª–µ–¥—É—é—â–µ–µ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–æ—Å—å. –û–∂–∏–¥–∞–π—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –Ω–∞—á–∞–ª–∞ –∏—Å–ø—ã—Ç–∞–Ω–∏—è."
    wait_for_user_info: str = "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –≤–µ—Ä—à–∏–Ω–µ –ø–æ–±–µ–¥—ã, –Ω–∞–∂–º–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç!"
    out_of_date_info: str = "–£–≤—ã, –Ω–æ –≤—ã —á—É—Ç—å-—á—É—Ç—å –ø—Ä–∏–ø–æ–∑–¥–Ω–∏–ª–∏—Å—å. –ò—Å–ø—ã—Ç–∞–Ω–∏–µ –±—ã–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ."
    post_end_info: str = "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ!"

    empty_messages: List[str] = [
        "–ù–µ—á–µ–≥–æ —Å–∫–∞–∑–∞—Ç—å " + r'¬Ø\_(„ÉÑ)_/¬Ø',
        "–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–∫ –¥—É–º–∞–µ—Ç–µ?",
        "–ú–æ–∂–µ—Ç –±—ã—Ç—å, –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ –ø–æ–≤–µ–∑–µ—Ç.",
        "–•–º–º...",
        "–≠—Ç–æ, –∫–æ–Ω–µ—á–Ω–æ, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
        "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ.",
    ]
    correct_answer_notifications: List[str] = ["–í–µ—Ä–Ω–æ.", "–ú–æ–ª–æ–¥–µ—Ü!", "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!", "–ò, –ø—Ä–∞–≤–¥–∞, —Ç–∞–∫."]
    incorrect_answer_notifications: List[str] = [
        "–ù–æ –æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.",
        "–û–¥–Ω–∞–∫–æ, –Ω–µ—Ç, –æ—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.",
        "–ò –≤ —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ø–∞—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç.",
        "...–≤ –æ–±—â–µ–º, –Ω–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ üòî",
        "–ï—â–µ –ø–æ–ø—ã—Ç–∫–∞?",
        "–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –µ—â–µ —Ä–∞–∑ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è?",
        "–Ø –±—ã —Å–∫–∞–∑–∞–ª, —á—Ç–æ –≤—ã –ø–æ–±–µ–¥–∏–ª–∏ - –Ω–æ –≤—ã –Ω–µ –ø–æ–±–µ–¥–∏–ª–∏. –ï—â–µ —Ä–∞–∑?",
        "–ù–∞–¥–æ –±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–∞—Ç—å –æ—Ç–≤–µ—Ç.",
        "–ù–∞–≤–µ—Ä–Ω–æ–µ, –≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –≤—Å–µ–ª–µ–Ω–Ω–æ–π —ç—Ç–æ –±—ã –±—ã–ª–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º. –ù–æ –≤ –Ω–∞—à–µ–π - —É–≤—ã.",
    ]

    skip_question_notifications: List[str] = [
        "–ï—Å–ª–∏ –æ—á–µ–Ω—å —Å–ª–æ–∂–Ω–æ - –≤–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å üòâ",
        "–ú–æ–∂–µ—Ç, –ø—Ä–æ–ø—É—Å—Ç–∏–º –≤–æ–ø—Ä–æ—Å? –¢–∞–∫ –º–æ–∂–Ω–æ.",
        "–í–æ–æ–±—â–µ –≥–æ–≤–æ—Ä—è, –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–µ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å.",
        "–í–æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞.",
        "–ö–∞–∫ –Ω–∞—Å—á–µ—Ç –ø—Ä–æ–ø—É—Å–∫–∞ –≤–æ–ø—Ä–æ—Å–∞?",
        "–ê –≤–æ–ø—Ä–æ—Å-—Ç–æ –º–æ–∂–Ω–æ –∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å!",
    ]
    skip_question_approval: str = (
        "–ë–∞–ª–ª –∑–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –Ω–µ –±—É–¥–µ—Ç –Ω–∞—á–∏—Å–ª–µ–Ω. –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ –±—É–¥–µ—Ç –Ω–µ–ª—å–∑—è. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º?"
    )
    skip_question_success: str = "–í–æ–ø—Ä–æ—Å –ø—Ä–æ–ø—É—â–µ–Ω."
    skip_question_refuse: str = "–ù–µ—Ç - —Ç–∞–∫ –Ω–µ—Ç. –ñ–¥—É –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞."
    skip_question_prohibited: str = "–î–∞–≤–∞–π –ø–æ–ø—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å."
    skip_question_notification_number: conint(ge=1) = 3  # type: ignore

    @property
    def random_empty_message(self) -> str:
        return choice(self.empty_messages)

    @property
    def random_correct_answer_notification(self) -> str:
        return choice(self.correct_answer_notifications)

    @property
    def random_incorrect_answer_notification(self) -> str:
        return choice(self.incorrect_answer_notifications)

    @property
    def random_skip_question_notification(self) -> str:
        return choice(self.skip_question_notifications)


class ChallengeSettings(BaseSettings):
    autostart: bool = False
    timezone: str = 'Asia/Yekaterinburg'
    challenges: List[ChallengeInfo]

    start_notification: str = "–î–ª—è —Ç–µ–±—è –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏—Å–ø—ã—Ç–∞–Ω–∏–µ #<b>{number}</b> <b>{name}</b>! <i>{description}</i>"
    already_started_notification: str = "–í—ã —É–∂–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —É—á–∞—Å—Ç–∏–µ –≤ –∏—Å–ø—ã—Ç–∞–Ω–∏–∏ <b>{name}</b>."

    pretender_notification: str = (
        "–ú–æ–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è! –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–µ '<b>{name}</b>' —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ <b>{scores}</b>. "
        "–í—Ä–µ–º—è —Ñ–∏–Ω–∏—à–∞: <code>{timestamp}</code> (<code>{timezone}</code>). "
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–∂–∏–¥–∞–π—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–æ—Ä–µ–≤–Ω–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è –∏—Ç–æ–≥–æ–≤."
    )

    next_answer_notification: str = "–í–æ–ø—Ä–æ—Å #<b>{number}</b>: {question}"

    challenge_info: str = "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ #<b>{number}</b>: <b>{name}</b>\n\n{results}"
    results_row: str = (
        "#{winner_pos} –º–µ—Å—Ç–æ: @{nick_name} —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –±–∞–ª–ª–æ–≤ <b>{scores}</b> "
        "(–≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: <code>{timestamp}</code>)"
    )
    time_info: str = "–û—Å—Ç–∞–ª–æ—Å—å <code>{minutes}</code> –º–∏–Ω—É—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏—Å–ø—ã—Ç–∞–Ω–∏—è."
    time_over_info: str = "–ò—Å–ø—ã—Ç–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –≤  <code>{timestamp}</code>  (<code>{timezone}</code>)."

    @validator('timezone')
    def validate_timezone(cls, v: str) -> str:
        try:
            pytz.timezone(v)
        except pytz.UnknownTimeZoneError as e:
            raise ValueError from e
        return v

    @property
    def tzinfo(self) -> datetime.tzinfo:
        return pytz.timezone(self.timezone)

    @property
    def challenge_amount(self) -> int:
        return len(self.challenges)

    def get_challenge_model(self, number: int) -> ChallengeInfo:
        return self.challenges[number - 1]

    def get_start_notification(self, challenge_num: int, challenge_name: str, description: str) -> str:
        return self.start_notification.format(number=challenge_num, name=challenge_name, description=description)

    def get_already_started_notification(self, challenge_name: str) -> str:
        return self.already_started_notification.format(name=challenge_name)

    def get_pretender_notification(self, challenge_name: str, scores: int, finished_at: datetime.datetime) -> str:
        return self.pretender_notification.format(
            name=challenge_name, scores=scores, timestamp=display_time(finished_at, self.tzinfo), timezone=self.timezone
        )

    def get_next_answer_notification(self, question: str, question_num: int) -> str:
        return self.next_answer_notification.format(question=question, number=question_num)

    def get_results_info(self, winner_results: Sequence[WinnerResult]) -> List[str]:
        results: List[str] = []
        for winner in winner_results:
            results.append(
                self.results_row.format(
                    winner_pos=winner.position,
                    nick_name=winner.user.nick_name,
                    scores=winner.scores,
                    timestamp=display_time(winner.finished_at, self.tzinfo),
                )
            )
        return results

    def get_challenge_info(self, challenge: ExtendedChallenge, winner_results: Sequence[WinnerResult]) -> str:
        if not challenge.finished:
            info = self.time_info.format(minutes=round(challenge.finish_after.total_seconds() / 60))
        else:
            info = (
                "\n".join(self.get_results_info(winner_results))
                + "\n\n"
                + self.time_over_info.format(
                    timestamp=display_time(challenge.data.finished_at, self.tzinfo), timezone=self.timezone
                )
            )
        return self.challenge_info.format(number=challenge.number, name=challenge.info.name, results=info)


class DataBaseSettings(BaseSettings):
    url: SAURL = 'postgresql://postgres:postgres@localhost:6432/quiz-bot'
    pool_recycle: int = 500
    pool_size: int = 6
    echo: bool = False
    application_name: str = socket.gethostname()
    connection_timeout: int = 5

    @validator('url', pre=True, always=True)
    def validate_url(cls, v: str) -> SAURL:
        try:
            return make_url(v)
        except ArgumentError as e:
            raise ValueError from e

    class Config:
        env_prefix = 'DB_'

    def setup_db(self) -> Engine:
        from quiz_bot.db.base import metadata

        engine = engine_from_config(
            {
                'url': self.url,
                "pool_recycle": self.pool_recycle,
                "pool_pre_ping": True,
                "pool_size": self.pool_size,
                "poolclass": SingletonThreadPool,
                "connect_args": {'connect_timeout': self.connection_timeout, 'application_name': self.application_name},
            },
            prefix="",
        )
        metadata.bind = engine
        return engine  # noqa: R504
